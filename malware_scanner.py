import os
import platform
import hashlib
from prettytable import PrettyTable
import yara

# Function to calculate file hashes
def calculate_hashes(file_path):
    hasher_md5 = hashlib.md5()
    hasher_sha1 = hashlib.sha1()
    hasher_sha256 = hashlib.sha256()

    with open(file_path, 'rb') as file:
        buf = file.read(65536)
        while len(buf) > 0:
            hasher_md5.update(buf)
            hasher_sha1.update(buf)
            hasher_sha256.update(buf)
            buf = file.read(65536)

    return hasher_md5.hexdigest(), hasher_sha1.hexdigest(), hasher_sha256.hexdigest()

# Function to classify malware based on hashes
def classify_malware(file_hashes, malicious_hashes, malware_classification, file_path):
    if os.path.getsize(file_path) == 0:
        return "Clean", None

    for hash_value in file_hashes:
        if hash_value in malicious_hashes:
            if hash_value in malware_classification:
                malware_type = malware_classification[hash_value]
                return malware_type, f"{hash_value} ({malware_type})"
            else:
                return "Unknown", f"{hash_value} (Unknown)"
    return "Clean", None

# Function to scan file for YARA rule-based detection
def scan_file_yara(file_path, rules, table):
    try:
        matches = rules.match(file_path)
    except yara.Error as e:
        print(f"Error scanning file '{file_path}': {e}")
        return table

    if matches:
        for match in matches:
            table.add_row([file_path, match.rule])
    return table

# Function to scan directory for both hash-based and YARA rule-based detection
def scan_directory(directory, malicious_hashes, malware_classification, rules, counter, table):
    for root, _, files in os.walk(directory):
        for file in files:
            file_path = os.path.join(root, file)
            try:
                file_hashes = calculate_hashes(file_path)
                malware_type, malware_info = classify_malware(file_hashes, malicious_hashes, malware_classification, file_path)
                if malware_type != "Clean":
                    table.add_row([file_path, malware_info])
                else:
                    table = scan_file_yara(file_path, rules, table)
                counter[0] += 1
            except PermissionError:
                pass
            except KeyboardInterrupt:
                raise
            except Exception as e:
                print(f"Error scanning file '{file_path}': {e}")
    return counter, table
